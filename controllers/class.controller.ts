import { Request, Response } from 'express';
import ClassModel from '../models/class.model';
import mongoose from 'mongoose';
import User from '../models/user.model';

// t·∫°o l·ªõp h·ªçc (teacher)
export const createClass = async (req: Request, res: Response) => {
  try {
    const { nameClass, subject, description, schedule, location, maxStudents } = req.body;
    const user = req.user as any;

    // Ch·ªâ gi√°o vi√™n m·ªõi ƒë∆∞·ª£c t·∫°o l·ªõp
    if (!user || user.role !== 'teacher') {
      return res.status(403).json({ message: 'Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn t·∫°o l·ªõp h·ªçc' });
    }

    // L·∫•y user profile (trong collection users) ƒë·ªÉ g√°n teacherId
    const teacherUser = await User.findOne({ authId: user._id, deleted: false });
    if (!teacherUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
    }

    const newClass = await ClassModel.create({
      nameClass,
      subject,
      description,
      schedule,
      location,
      maxStudents,
      teacherId: teacherUser._id, // üëà lu√¥n d√πng user._id
      createdBy: user._id, // üëà ƒë√¢y l√† id trong b·∫£ng auth (ng∆∞·ªùi t·∫°o)
    });

    return res.status(201).json({ message: 'T·∫°o l·ªõp h·ªçc th√†nh c√¥ng', data: newClass });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// xem danh s√°ch l·ªõp h·ªçc
export const getAllClasses = async (req: Request, res: Response) => {
  try {
    const user = req.user as any;

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    if (!user) {
      return res.status(401).json({ message: 'Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c' });
    }

    // console.log('User info in getAllClasses:', { userId: user._id, role: user.role });

    // N·∫øu l√† gi√°o vi√™n: ch·ªâ th·∫•y c√°c l·ªõp do m√¨nh t·∫°o
    if (user?.role === 'teacher') {
      const teacherUser = await User.findOne({ authId: user._id, deleted: false });
      if (!teacherUser) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
      }
      const classes = await ClassModel.find({
        teacherId: teacherUser._id,
        deleted: { $ne: true },
      }).populate('teacherId', 'username email');
      return res.status(200).json({
        message: 'L·∫•y danh s√°ch l·ªõp h·ªçc c·ªßa gi√°o vi√™n th√†nh c√¥ng',
        data: classes,
      });
    }

    // N·∫øu l√† h·ªçc sinh: th·∫•y t·∫•t c·∫£ l·ªõp v√† k√®m t√™n gi√°o vi√™n
    if (user?.role === 'student') {
      const classes = await ClassModel.find({ deleted: { $ne: true } }).populate(
        'teacherId',
        'username email',
      );
      return res.status(200).json({
        message: 'L·∫•y danh s√°ch t·∫•t c·∫£ l·ªõp h·ªçc th√†nh c√¥ng',
        data: classes,
      });
    }

    // N·∫øu l√† admin: th·∫•y t·∫•t c·∫£ l·ªõp h·ªçc
    if (user?.role === 'admin') {
      const classes = await ClassModel.find({ deleted: { $ne: true } }).populate(
        'teacherId',
        'username email',
      );
      return res.status(200).json({
        message: 'L·∫•y danh s√°ch t·∫•t c·∫£ l·ªõp h·ªçc th√†nh c√¥ng',
        data: classes,
      });
    }

    // N·∫øu kh√¥ng c√≥ role h·ª£p l·ªá
    console.log('Invalid role detected:', user.role);
    return res.status(403).json({
      message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
      userRole: user.role,
      validRoles: ['teacher', 'student', 'admin'],
    });
  } catch (err) {
    console.error('Error in getAllClasses:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// xem l·ªõp h·ªçc
export const getClassById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const foundClass = await ClassModel.findById(id);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }
    return res.status(200).json({ message: 'L·∫•y th√¥ng tin l·ªõp h·ªçc th√†nh c√¥ng', data: foundClass });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// s·ª≠a th√¥ng tin l·ªõp h·ªçc (teacher)
export const updateClass = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const user = req.user as any;
    const updateData = req.body;
    const foundClass = await ClassModel.findById(id);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }
    // Ch·ªâ gi√°o vi√™n t·∫°o l·ªõp m·ªõi ƒë∆∞·ª£c s·ª≠a
    const teacherUser = await User.findOne({ authId: user._id, deleted: false });
    if (!teacherUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
    }

    if (String(foundClass.teacherId) !== String(teacherUser._id)) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a l·ªõp h·ªçc n√†y' });
    }
    const updatedClass = await ClassModel.findByIdAndUpdate(id, updateData, {
      new: true,
    });
    return res.status(200).json({ message: 'C·∫≠p nh·∫≠t l·ªõp h·ªçc th√†nh c√¥ng', data: updatedClass });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// x√≥a l·ªõp h·ªçc (teacher)
export const deleteClass = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const user = req.user as any;
    const foundClass = await ClassModel.findById(id);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }
    // Ch·ªâ gi√°o vi√™n t·∫°o l·ªõp m·ªõi ƒë∆∞·ª£c x√≥a
    const teacherUser = await User.findOne({ authId: user._id, deleted: false });
    if (!teacherUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
    }

    if (String(foundClass.teacherId) !== String(teacherUser._id)) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a l·ªõp h·ªçc n√†y' });
    }
    await ClassModel.findByIdAndDelete(id);
    return res.status(200).json({
      message: 'X√≥a l·ªõp h·ªçc th√†nh c√¥ng',
      data: {
        _id: foundClass._id,
        nameClass: foundClass.nameClass,
        subject: foundClass.subject,
      },
    });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// xem danh s√°ch h·ªçc sinh ƒë√£ tham gia l·ªõp
export const getStudentsByClass = async (req: Request, res: Response) => {
  try {
    const { classId } = req.params;
    const user = req.user as any;

    // T√¨m l·ªõp v√† populate h·ªçc sinh + gi√°o vi√™n
    const foundClass = await ClassModel.findById(classId)
      .populate('teacherId', 'username email avatar')
      .populate('students', 'username email avatar');

    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findOne({ authId: user._id, deleted: false });
    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }

    const isOwnerTeacher = String(foundClass.teacherId._id) === String(currentUser._id);
    const isAdmin = user.role === 'admin';

    // ƒëi·ªÅu ki·ªán ki·ªÉm tra h·ªçc sinh trong l·ªõp
    const isStudentInClass = foundClass.students.some((stu: any) => {
      return String(stu._id) === String(currentUser._id);
    });

    // üëà Ch·ªâ ki·ªÉm tra quy·ªÅn cho role student, teacher v√† admin lu√¥n ƒë∆∞·ª£c xem
    if (user.role === 'student' && !isStudentInClass) {
      return res.status(403).json({
        message:
          'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch h·ªçc sinh l·ªõp n√†y (ch·ªâ h·ªçc sinh trong l·ªõp m·ªõi ƒë∆∞·ª£c xem)',
        debug: {
          currentUserId: currentUser._id,
          userRole: user.role,
          isOwnerTeacher,
          isAdmin,
          isStudentInClass,
          studentsCount: foundClass.students.length,
        },
      });
    }

    // Teacher c·ªßa l·ªõp n√†y ho·∫∑c admin lu√¥n ƒë∆∞·ª£c xem
    if (user.role === 'teacher' && !isOwnerTeacher && !isAdmin) {
      return res.status(403).json({
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch h·ªçc sinh l·ªõp n√†y (ch·ªâ gi√°o vi√™n c·ªßa l·ªõp)',
        debug: {
          currentUserId: currentUser._id,
          userRole: user.role,
          isOwnerTeacher,
          isAdmin,
        },
      });
    }

    return res.status(200).json({
      message: 'Danh s√°ch h·ªçc sinh trong l·ªõp',
      classInfo: {
        _id: foundClass._id,
        nameClass: foundClass.nameClass,
        subject: foundClass.subject,
        maxStudents: foundClass.maxStudents,
      },
      teacher: foundClass.teacherId,
      students: foundClass.students || [],
      totalStudents: foundClass.students?.length || 0,
    });
  } catch (err) {
    console.error('Error in getStudentsByClass:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// h·ªçc sinh ƒëƒÉng k√Ω l·ªõp h·ªçc (student) -> th√™m v√†o pendingStudents
export const joinClass = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const user = req.user as any;

    const foundClass = await ClassModel.findById(id);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findOne({ authId: user._id, deleted: false });
    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }

    // Ki·ªÉm tra n·∫øu user l√† gi√°o vi√™n c·ªßa l·ªõp n√†y
    if (String(foundClass.teacherId) === String(currentUser._id)) {
      return res.status(400).json({ message: 'B·∫°n kh√¥ng th·ªÉ ƒëƒÉng k√Ω v√†o l·ªõp do ch√≠nh m√¨nh t·∫°o' });
    }

    // Ki·ªÉm tra n·∫øu h·ªçc sinh ƒë√£ tham gia l·ªõp
    if (foundClass.students.includes(currentUser._id)) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ tham gia l·ªõp n√†y' });
    }

    // N·∫øu ƒë√£ g·ª≠i ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥
    if (foundClass.pendingStudents.includes(currentUser._id)) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu tham gia l·ªõp n√†y' });
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng h·ªçc sinh (t·ªïng s·ªë ƒë√£ ƒë∆∞·ª£c duy·ªát + ƒëang ch·ªù)
    const totalStudents = foundClass.students.length + foundClass.pendingStudents.length;
    if (foundClass.maxStudents && totalStudents >= foundClass.maxStudents) {
      return res.status(400).json({
        message: 'L·ªõp h·ªçc ƒë√£ ƒë·∫ßy. Kh√¥ng th·ªÉ ƒëƒÉng k√Ω th√™m',
        details: {
          maxStudents: foundClass.maxStudents,
          currentStudents: foundClass.students.length,
          pendingStudents: foundClass.pendingStudents.length,
        },
      });
    }

    // Th√™m h·ªçc sinh v√†o danh s√°ch ch·ªù trong ClassModel
    foundClass.pendingStudents.push(currentUser._id);
    await foundClass.save();

    // Th√™m l·ªõp v√†o danh s√°ch ƒëƒÉng k√Ω trong UserModel
    currentUser.registeredClasses.push({
      classId: foundClass._id,
      status: 'pending',
      registeredAt: new Date(),
    });
    await currentUser.save();

    return res.status(200).json({
      message: 'ƒêƒÉng k√Ω l·ªõp th√†nh c√¥ng, vui l√≤ng ch·ªù gi√°o vi√™n x√°c nh·∫≠n',
      data: {
        classId: foundClass._id,
        className: foundClass.nameClass,
        subject: foundClass.subject,
        teacherId: foundClass.teacherId,
        status: 'pending',
        registeredAt: new Date(),
        position: foundClass.pendingStudents.length, // v·ªã tr√≠ trong h√†ng ƒë·ª£i
      },
    });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// gi√°o vi√™n xem danh s√°ch h·ªçc sinh ƒëƒÉng k√Ω l·ªõp (teacher) c·ªßa l·ªõp m√¨nh t·∫°o
export const getPendingStudents = async (req: Request, res: Response) => {
  try {
    const { classId } = req.params; // classId
    const teacher = req.user as any;

    const foundClass = await ClassModel.findById(classId).populate(
      'pendingStudents',
      'username email avatar',
    );
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }

    // L·∫•y th√¥ng tin teacher hi·ªán t·∫°i
    const teacherUser = await User.findOne({ authId: teacher._id, deleted: false });
    if (!teacherUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
    }

    if (String(foundClass.teacherId) !== String(teacherUser._id)) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ch·ªù l·ªõp n√†y' });
    }

    return res.status(200).json({
      message: 'Danh s√°ch h·ªçc sinh ch·ªù x√°c nh·∫≠n',
      data: foundClass.pendingStudents,
      totalPending: foundClass.pendingStudents.length,
    });
  } catch (error) {
    return res.status(500).json({ message: 'L·ªói server', error: error });
  }
};

// gi√°o vi√™n duy·ªát h·ªçc sinh v√†o l·ªõp (teacher)
export const approveStudent = async (req: Request, res: Response) => {
  try {
    const { classId, studentId } = req.params;
    const teacher = req.user as any;

    const foundClass = await ClassModel.findById(classId);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }

    // Ch·ªâ gi√°o vi√™n t·∫°o l·ªõp m·ªõi ƒë∆∞·ª£c duy·ªát
    const teacherUser = await User.findOne({ authId: teacher._id, deleted: false });
    if (!teacherUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n' });
    }

    if (String(foundClass.teacherId) !== String(teacherUser._id)) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát h·ªçc sinh l·ªõp n√†y' });
    }

    // Convert studentId to ObjectId for comparison
    const studentObjectId = new mongoose.Types.ObjectId(studentId);

    // Ki·ªÉm tra h·ªçc sinh c√≥ trong pendingStudents kh√¥ng
    if (!foundClass.pendingStudents.some((id: any) => String(id) === String(studentId))) {
      return res.status(400).json({ message: 'H·ªçc sinh kh√¥ng c√≥ trong danh s√°ch ch·ªù' });
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng h·ªçc sinh
    if (foundClass.maxStudents && foundClass.students.length >= foundClass.maxStudents) {
      return res.status(400).json({
        message: 'L·ªõp h·ªçc ƒë√£ ƒë·∫ßy. Kh√¥ng th·ªÉ duy·ªát th√™m h·ªçc sinh',
        details: {
          maxStudents: foundClass.maxStudents,
          currentStudents: foundClass.students.length,
        },
      });
    }

    // X√≥a kh·ªèi pending v√† th√™m v√†o students
    foundClass.pendingStudents = foundClass.pendingStudents.filter(
      (id: any) => String(id) !== String(studentId),
    );
    foundClass.students.push(studentObjectId);
    await foundClass.save();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong UserModel
    const studentUser = await User.findById(studentId);
    if (studentUser) {
      const registeredClass = studentUser.registeredClasses.find(
        (rc: any) => String(rc.classId) === String(classId),
      );
      if (registeredClass) {
        registeredClass.status = 'approved';
        registeredClass.approvedAt = new Date();
        await studentUser.save();
      }
    }

    // Populate ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt sau khi save
    const updatedClass = await ClassModel.findById(classId)
      .populate('students', 'username email avatar')
      .populate('pendingStudents', 'username email avatar');

    // L·∫•y th√¥ng tin h·ªçc sinh v·ª´a ƒë∆∞·ª£c duy·ªát
    const approvedStudent = await User.findById(studentId, 'username email avatar');

    return res.status(200).json({
      message: 'X√°c nh·∫≠n h·ªçc sinh th√†nh c√¥ng',
      approvedStudent: approvedStudent, // Th√¥ng tin h·ªçc sinh v·ª´a ƒë∆∞·ª£c duy·ªát
      data: {
        students: updatedClass?.students || [], // Danh s√°ch t·∫•t c·∫£ h·ªçc sinh ƒë√£ duy·ªát
        pendingStudents: updatedClass?.pendingStudents || [], // Danh s√°ch h·ªçc sinh c√≤n ch·ªù
        totalStudents: updatedClass?.students.length || 0,
        totalPending: updatedClass?.pendingStudents.length || 0,
      },
    });
  } catch (error) {
    return res.status(500).json({ message: 'L·ªói server', error: error });
  }
};

// h·ªçc sinh xem c√°c l·ªõp ƒë√£ ƒëƒÉng k√Ω v√† ƒëang duy·ªát (student)
export const getMyPendingClasses = async (req: Request, res: Response) => {
  try {
    const user = req.user as any;

    // Ch·ªâ h·ªçc sinh m·ªõi c√≥ th·ªÉ xem c√°c l·ªõp ƒëang ch·ªù duy·ªát
    if (!user || user.role !== 'student') {
      return res.status(403).json({ message: 'Ch·ªâ h·ªçc sinh m·ªõi c√≥ quy·ªÅn xem l·ªõp ƒëang ch·ªù duy·ªát' });
    }

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findOne({ authId: user._id, deleted: false }).populate({
      path: 'registeredClasses.classId',
      populate: {
        path: 'teacherId',
        select: 'username email avatar',
      },
    });

    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }

    // L·ªçc ch·ªâ c√°c l·ªõp ƒëang ch·ªù duy·ªát (status = 'pending')
    const pendingClasses = currentUser.registeredClasses.filter(
      (regClass: any) => regClass.status === 'pending',
    );

    // Format l·∫°i d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ
    const formattedClasses = pendingClasses.map((regClass: any) => {
      const classInfo = regClass.classId;
      return {
        _id: classInfo._id,
        nameClass: classInfo.nameClass,
        subject: classInfo.subject,
        description: classInfo.description,
        schedule: classInfo.schedule,
        location: classInfo.location,
        maxStudents: classInfo.maxStudents,
        teacher: classInfo.teacherId,
        registrationInfo: {
          registeredAt: regClass.registeredAt,
          status: regClass.status,
        },
        createdAt: classInfo.createdAt,
        updatedAt: classInfo.updatedAt,
      };
    });

    return res.status(200).json({
      message: 'L·∫•y danh s√°ch l·ªõp ƒëang ch·ªù duy·ªát th√†nh c√¥ng',
      data: formattedClasses,
      totalClasses: formattedClasses.length,
    });
  } catch (err) {
    console.error('Error in getMyPendingClasses:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// h·ªçc sinh xem c√°c l·ªõp ƒë√£ ƒëƒÉng k√Ω v√† ƒë∆∞·ª£c duy·ªát (student)
export const getMyRegisteredClasses = async (req: Request, res: Response) => {
  try {
    const user = req.user as any;

    // Ch·ªâ h·ªçc sinh m·ªõi c√≥ th·ªÉ xem c√°c l·ªõp ƒë√£ ƒëƒÉng k√Ω
    if (!user || user.role !== 'student') {
      return res.status(403).json({ message: 'Ch·ªâ h·ªçc sinh m·ªõi c√≥ quy·ªÅn xem l·ªõp ƒë√£ ƒëƒÉng k√Ω' });
    }

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findOne({ authId: user._id, deleted: false }).populate({
      path: 'registeredClasses.classId',
      populate: {
        path: 'teacherId',
        select: 'username email avatar',
      },
    });

    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }

    // L·ªçc ch·ªâ c√°c l·ªõp ƒë√£ ƒë∆∞·ª£c duy·ªát (status = 'approved')
    const approvedClasses = currentUser.registeredClasses.filter(
      (regClass: any) => regClass.status === 'approved',
    );

    // Format l·∫°i d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ
    const formattedClasses = approvedClasses.map((regClass: any) => {
      const classInfo = regClass.classId;
      return {
        _id: classInfo._id,
        nameClass: classInfo.nameClass,
        subject: classInfo.subject,
        description: classInfo.description,
        schedule: classInfo.schedule,
        location: classInfo.location,
        maxStudents: classInfo.maxStudents,
        teacher: classInfo.teacherId,
        registrationInfo: {
          registeredAt: regClass.registeredAt,
          approvedAt: regClass.approvedAt,
          status: regClass.status,
        },
        createdAt: classInfo.createdAt,
        updatedAt: classInfo.updatedAt,
      };
    });

    return res.status(200).json({
      message: 'L·∫•y danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng',
      data: formattedClasses,
      totalClasses: formattedClasses.length,
    });
  } catch (err) {
    console.error('Error in getMyRegisteredClasses:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};

// h·ªçc sinh r·ªùi kh·ªèi l·ªõp h·ªçc (student)
export const leaveClass = async (req: Request, res: Response) => {
  try {
    const { classId } = req.params; // classId
    const user = req.user as any;

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findOne({ authId: user._id, deleted: false });
    if (!currentUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' });
    }

    const foundClass = await ClassModel.findById(classId);
    if (!foundClass) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc' });
    }

    // Ki·ªÉm tra h·ªçc sinh c√≥ trong l·ªõp kh√¥ng
    const isInClass = foundClass.students.includes(currentUser._id);
    const isPending = foundClass.pendingStudents.includes(currentUser._id);

    if (!isInClass && !isPending) {
      return res.status(400).json({ message: 'B·∫°n kh√¥ng c√≥ trong l·ªõp h·ªçc n√†y' });
    }

    // X√≥a kh·ªèi ClassModel
    if (isInClass) {
      foundClass.students = foundClass.students.filter(
        (id: any) => String(id) !== String(currentUser._id),
      );
    }
    if (isPending) {
      foundClass.pendingStudents = foundClass.pendingStudents.filter(
        (id: any) => String(id) !== String(currentUser._id),
      );
    }
    await foundClass.save();

    // X√≥a kh·ªèi UserModel
    const registeredClassIndex = currentUser.registeredClasses.findIndex(
      (rc: any) => String(rc.classId) === String(classId),
    );
    if (registeredClassIndex !== -1) {
      currentUser.registeredClasses.splice(registeredClassIndex, 1);
    }
    await currentUser.save();

    return res.status(200).json({
      message: 'R·ªùi kh·ªèi l·ªõp h·ªçc th√†nh c√¥ng',
      data: {
        classId: foundClass._id,
        className: foundClass.nameClass,
        leftAt: new Date(),
      },
    });
  } catch (err) {
    return res.status(500).json({ message: 'L·ªói server', error: err });
  }
};
