import { Request, Response } from 'express';
import mongoose from 'mongoose';
import ExerciseModel from '../models/exercises.model';
import ClassModel from '../models/class.model';
import UserModel from '../models/user.model';
import { sendError, sendSuccess } from '../helpers/response';
import {
  uploadExerciseFileToSupabase,
  deleteExerciseFileFromSupabase,
} from '../helpers/uploadFile';

export const createExercise = async (req: Request, res: Response) => {
  try {
    const { title, description, dueDate, maxScore, subject, type, questions } = req.body; // ƒê√£ ƒë∆∞·ª£c validate b·ªüi middleware
    const { classId } = req.params; // L·∫•y t·ª´ URL params
    const user = req.user as any;

    // Ch·ªâ gi√°o vi√™n
    if (!user || user.role !== 'teacher') {
      return sendError(res, 403, 'Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn t·∫°o b√†i t·∫≠p');
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId cho classId t·ª´ params
    if (!mongoose.Types.ObjectId.isValid(classId)) {
      return sendError(res, 400, 'ID l·ªõp h·ªçc kh√¥ng h·ª£p l·ªá');
    }

    // L·∫•y th√¥ng tin gi√°o vi√™n
    const teacherUser = await UserModel.findOne({ authId: user._id, deleted: false });
    if (!teacherUser) return sendError(res, 404, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n');

    // Ki·ªÉm tra l·ªõp h·ªçc
    const foundClass = await ClassModel.findById(classId);
    if (!foundClass) return sendError(res, 404, 'Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc');
    if (String(foundClass.teacherId) !== String(teacherUser._id)) {
      return sendError(res, 403, 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b√†i t·∫≠p cho l·ªõp h·ªçc n√†y');
    }
    if (foundClass.deleted) {
      return sendError(res, 400, 'Kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p cho l·ªõp h·ªçc ƒë√£ b·ªã x√≥a');
    }

    // T√≠nh to√°n maxScore cho b√†i t·∫≠p tr·∫Øc nghi·ªám
    let calculatedMaxScore = maxScore;
    if (type === 'multiple_choice' && questions && questions.length > 0) {
      // N·∫øu kh√¥ng c√≥ maxScore ƒë∆∞·ª£c cung c·∫•p, t√≠nh t·ª´ t·ªïng ƒëi·ªÉm c√°c c√¢u h·ªèi
      if (!calculatedMaxScore) {
        calculatedMaxScore = questions.reduce(
          (total: number, q: any) => total + (q.points || 1),
          0,
        );
      }
    } else if (!calculatedMaxScore) {
      calculatedMaxScore = 10; // M·∫∑c ƒë·ªãnh cho b√†i t·∫≠p kh√°c
    }

    // X·ª≠ l√Ω file attachments n·∫øu c√≥
    const attachments: any[] = [];
    const files = req.files as Express.Multer.File[];

    if (files && files.length > 0) {
      console.log(`üìé Processing ${files.length} file(s)...`);

      for (const file of files) {
        const uploadResult = await uploadExerciseFileToSupabase({
          file,
          teacherName: teacherUser.username || 'Teacher',
          className: foundClass.nameClass || 'Unknown_Class',
          exerciseTitle: title,
        });

        if (uploadResult.success) {
          attachments.push({
            fileName: uploadResult.fileName,
            fileUrl: uploadResult.fileUrl,
            fileSize: file.size,
            mimeType: file.mimetype,
            uploadedAt: new Date(),
          });
          console.log(`‚úÖ File uploaded: ${uploadResult.fileName}`);
        } else {
          console.error(`‚ùå Failed to upload file: ${file.originalname}`, uploadResult.error);
          return sendError(res, 500, `L·ªói upload file: ${uploadResult.error}`);
        }
      }
    }

    // T·∫°o object b√†i t·∫≠p
    const exerciseData: any = {
      title,
      description,
      type,
      classId,
      createdBy: teacherUser._id,
      dueDate,
      maxScore: calculatedMaxScore,
      subject: subject || foundClass.subject,
      status: 'open',
      submissions: [],
      attachments, // Th√™m attachments
    };

    // Th√™m questions n·∫øu l√† b√†i t·∫≠p tr·∫Øc nghi·ªám
    if (type === 'multiple_choice' && questions) {
      exerciseData.questions = questions;
    }

    // T·∫°o b√†i t·∫≠p
    const newExercise = await ExerciseModel.create(exerciseData);

    const populatedExercise = await ExerciseModel.findById(newExercise._id)
      .populate('classId', 'nameClass subject gradeLevel')
      .populate('createdBy', 'username email');

    return sendSuccess(res, {
      message: `T·∫°o b√†i t·∫≠p ${
        type === 'multiple_choice' ? 'tr·∫Øc nghi·ªám' : type === 'essay' ? 't·ª± lu·∫≠n' : 'upload file'
      } th√†nh c√¥ng`,
      data: populatedExercise,
    });
  } catch (err) {
    console.error('Error in createExercise:', err);
    return sendError(res, 500, 'L·ªói server khi t·∫°o b√†i t·∫≠p');
  }
};

export const updateExercise = async (req: Request, res: Response) => {
  try {
    const { exerciseId } = req.params;
    const { title, description, dueDate, maxScore, subject, type, questions, removeFileIds } =
      req.body;
    const user = req.user as any;

    // Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t
    if (!user || user.role !== 'teacher') {
      return sendError(res, 403, 'Ch·ªâ gi√°o vi√™n m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i t·∫≠p');
    }

    // Ki·ªÉm tra ObjectId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(exerciseId)) {
      return sendError(res, 400, 'ID b√†i t·∫≠p kh√¥ng h·ª£p l·ªá');
    }

    // T√¨m th√¥ng tin gi√°o vi√™n
    const teacherUser = await UserModel.findOne({ authId: user._id, deleted: false });
    if (!teacherUser) return sendError(res, 404, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√°o vi√™n');

    // L·∫•y th√¥ng tin b√†i t·∫≠p v·ªõi populate class ƒë·ªÉ l·∫•y t√™n l·ªõp
    const exercise = await ExerciseModel.findById(exerciseId).populate('classId', 'nameClass');
    if (!exercise) return sendError(res, 404, 'Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p');

    // Ki·ªÉm tra quy·ªÅn s·ª≠a (gi√°o vi√™n t·∫°o ra b√†i t·∫≠p n√†y)
    if (String(exercise.createdBy) !== String(teacherUser._id)) {
      return sendError(res, 403, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a b√†i t·∫≠p n√†y');
    }

    // L∆∞u th√¥ng tin c≈© ƒë·ªÉ ki·ªÉm tra thay ƒë·ªïi
    const oldDueDate = exercise.dueDate;

    // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
    if (title !== undefined) exercise.title = title;
    if (description !== undefined) exercise.description = description;
    if (maxScore !== undefined) exercise.maxScore = maxScore;
    if (subject !== undefined) exercise.subject = subject;
    if (type !== undefined) exercise.type = type;

    // C·∫≠p nh·∫≠t dueDate v·ªõi validation
    if (dueDate !== undefined) {
      const newDueDate = new Date(dueDate);
      const now = new Date();

      // Ch·ªâ cho ph√©p gia h·∫°n ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ch∆∞a h·∫øt h·∫°n
      if (oldDueDate && oldDueDate < now && newDueDate < now) {
        return sendError(
          res,
          400,
          'Kh√¥ng th·ªÉ ƒë·∫∑t th·ªùi h·∫°n n·ªôp b√†i trong qu√° kh·ª© khi b√†i t·∫≠p ƒë√£ h·∫øt h·∫°n',
        );
      }

      exercise.dueDate = newDueDate;
    }

    // C·∫≠p nh·∫≠t questions cho b√†i t·∫≠p tr·∫Øc nghi·ªám
    if (questions !== undefined) {
      if (exercise.type === 'multiple_choice' || type === 'multiple_choice') {
        exercise.questions = questions;

        // T√≠nh l·∫°i maxScore n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        if (maxScore === undefined && questions.length > 0) {
          exercise.maxScore = questions.reduce(
            (total: number, q: any) => total + (q.points || 1),
            0,
          );
        }
      }
    }

    // X·ª≠ l√Ω x√≥a file c≈© n·∫øu c√≥
    if (removeFileIds && Array.isArray(removeFileIds) && removeFileIds.length > 0) {
      // L·∫•y th√¥ng tin c√°c file c·∫ßn x√≥a tr∆∞·ªõc khi x√≥a kh·ªèi database
      const filesToDelete = [];
      for (const fileId of removeFileIds) {
        const attachmentToRemove = exercise.attachments.id(fileId);
        if (attachmentToRemove) {
          filesToDelete.push(attachmentToRemove.fileUrl);
          exercise.attachments.pull(fileId);
        }
      }

      // X√≥a file t·ª´ Supabase Storage
      for (const fileUrl of filesToDelete) {
        const deleteSuccess = await deleteExerciseFileFromSupabase(fileUrl);
        if (!deleteSuccess) {
          console.warn(`‚ö†Ô∏è Failed to delete file from storage: ${fileUrl}`);
        }
      }

      console.log(`üóëÔ∏è Removed ${filesToDelete.length} file(s) from exercise`);
    }

    // X·ª≠ l√Ω file attachments m·ªõi n·∫øu c√≥
    const files = req.files as Express.Multer.File[];
    if (files && files.length > 0) {
      console.log(`üìé Processing ${files.length} new file(s)...`);

      const newAttachments: any[] = [];
      const classInfo = exercise.classId as any;

      for (const file of files) {
        const uploadResult = await uploadExerciseFileToSupabase({
          file,
          teacherName: teacherUser.username || 'Teacher',
          className: classInfo?.nameClass || 'Unknown_Class',
          exerciseTitle: exercise.title,
        });

        if (uploadResult.success) {
          newAttachments.push({
            fileName: uploadResult.fileName,
            fileUrl: uploadResult.fileUrl,
            fileSize: file.size,
            mimeType: file.mimetype,
            uploadedAt: new Date(),
          });
          console.log(`‚úÖ New file uploaded: ${uploadResult.fileName}`);
        } else {
          console.error(`‚ùå Failed to upload file: ${file.originalname}`, uploadResult.error);
          return sendError(res, 500, `L·ªói upload file: ${uploadResult.error}`);
        }
      }

      // Th√™m file m·ªõi v√†o danh s√°ch attachments hi·ªán c√≥
      for (const newAttachment of newAttachments) {
        exercise.attachments.push(newAttachment);
      }
    }

    // C·∫≠p nh·∫≠t th·ªùi gian ch·ªânh s·ª≠a
    exercise.updatedAt = new Date();

    await exercise.save();

    const populatedExercise = await ExerciseModel.findById(exercise._id)
      .populate('classId', 'nameClass subject gradeLevel')
      .populate('createdBy', 'username email');

    return sendSuccess(res, {
      message: 'C·∫≠p nh·∫≠t b√†i t·∫≠p th√†nh c√¥ng',
      data: populatedExercise,
    });
  } catch (err) {
    console.error('Error in updateExercise:', err);
    return sendError(res, 500, 'L·ªói server khi c·∫≠p nh·∫≠t b√†i t·∫≠p');
  }
};
